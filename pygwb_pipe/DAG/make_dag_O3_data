#!/bin/env python

import numpy as np
import os
from pathlib import Path
import shutil
import argparse

def main():
    dag_parser = argparse.ArgumentParser()
    dag_parser.add_argument(
        "--subfile", help="Submission file.", action="store", type=str
    ) #"condor/Simulated_Data_New_Pipeline.sub"
    dag_parser.add_argument(
        "--job_file_path", help="Path to data files folder.", action="store", type=Path
    ) #"PROJECTS/SMDC_2021/100_day_test_pygwb/MDC_Generation_2/output/"
    dag_parser.add_argument(
        "--t0", help = "Begin time of analysed data, optional argument if one does not wish to analyse the whole job file", 
        action="store", type=int, required=False
    )
    dag_parser.add_argument(
        "--tf", help = "End time of analysed data, optional argument if one does not wish to analyse the whole job file", 
        action="store", type=int, required=False
    )
    dag_parser.add_argument(
        "--parentdir", help="Starting folder.", action="store", type=Path, required=False
    )
    dag_parser.add_argument(
        "--param_file", help="Path to parameters.ini file.", action="store", type=str, required=False
    )
    dag_parser.add_argument(
        "--dag_name", help="Dag file name.", action="store", type=str, required=False
    )
    dag_args = dag_parser.parse_args() 
    
    if not dag_args.parentdir:
        dag_args.parentdir = Path(os.path.abspath('./'))
    if not dag_args.param_file:
        dag_args.param_file = os.path.abspath('../parameters.ini')
    if not dag_args.dag_name:
        dag_args.dag_name = "condor_O3_data.dag"
        
    if dag_args.t0 is not None and dag_args.tf is None:
        print("t0 was provided, but tf was not. The dag file will be made until the end of the job file.")

    # Filepaths
    outputdir = dag_args.parentdir / "output"
    logdir = outputdir / "condorLogs"
    
    # Make directories
    logdir.mkdir(parents=True, exist_ok=True)
    outputdir.mkdir(parents=True, exist_ok=True)
    
    dag = outputdir / dag_args.dag_name
    
    # Get the local executable
    #executable = shutil.which('pygwb_pipe')
    
    executable = "/home/max.lalleman/public_html/Code/New_Clone_pyGWB/pygwb/pygwb_pipe/pygwb_pipe"

    # Args

    Times_list = np.loadtxt(f"{dag_args.job_file_path}", dtype = 'int',  delimiter = ' ')
    
    if dag_args.tf is None:
        dag_args.tf = Times_list[:,2][-1]
    
    if dag_args.t0 is not None:
        t0_list = np.array([ele for ele in Times_list[:,1] if ele > dag_args.t0 and ele < dag_args.tf])
        t0_list = np.insert(t0_list, 0, dag_args.t0)
        tf_list = np.array([ele for ele in Times_list[:,2] if ele > t0_list[0] and ele <= dag_args.tf])
        if tf_list[-1] < dag_args.tf:
            tf_list = np.append(tf_list, dag_args.tf)
        length_list = np.array([tf - t0 for tf,t0 in zip(tf_list, t0_list)])
    else:
        t0_list = Times_list[:,1]
        tf_list = Times_list[:,2]
        length_list = Times_list[:,3]

    print(length_list)
    print(t0_list)
    print(tf_list)

    t_index = [index for index,t in enumerate(length_list) if t >= 771] #At the moment, pyGWB cannot handle these very small segments.

    print(t_index)
    
    t0_actual = t0_list[t_index]
    tf_actual = tf_list[t_index]
    length_actual = length_list[t_index]

    #print(t0_actual)

    t0_try = t0_actual[0:2] #Used for testing purposes

    with open(dag,"w") as dagfile:

        for index,t0 in enumerate(t0_actual):
            dagfile.write(f"JOB {index} {os.path.abspath(dag_args.subfile)}\n")
            
            dagfile.write(
                f'VARS {index} job="{index}" executable="{executable}" ARGS="--t0 {t0} --tf {tf_actual[index]} '
                f'--output_path {outputdir} --param_file {os.path.abspath(dag_args.param_file)}" logdir="{logdir}"\n'
            )
            dagfile.write("\n")
        
if __name__ == "__main__":
    main()

