#!/bin/env python

import argparse
import os
from pathlib import Path
from os import listdir
from os.path import isfile, join
from pygwb.postprocessing import (
    calc_Y_sigma_from_Yf_varf,
    combine_spectra_with_sigma_weights,
)
from pygwb.omega_spectra import OmegaSpectrum, reweight_spectral_object
from pygwb.baseline import Baseline

import numpy as np
from loguru import logger


def sorting_function(item):
    res = item.partition("point_estimate_sigma_")[-1]
    return np.float64(res.partition("-")[0])


"""
SCRIPT TO COMBINE PYGWB_PIPE RUN OUTPUTS.
currently only works with npz - this will be updated for compatibility with other formats as wego along.
"""


def main():
    combine_parser = argparse.ArgumentParser()
    combine_parser.add_argument(
        "--data_path", help="Path to data files folder.", action="store", type=Path
    )
    combine_parser.add_argument(
        "--alpha",
        help="Spectral index alpha to use for spectral re-weighting.",
        action="store",
        type=str,
    )
    combine_parser.add_argument(
        "--fref",
        help="Reference frequency to use when presenting results.",
        action="store",
        type=int,
    )
    combine_parser.add_argument(
        "--param_file", help="Parameter file", action="store", type=str
    )
    combine_parser.add_argument(
        "--h0",
        help="Value of h0 to use. Default is 0.7.",
        action="store",
        type=float,
        required=False,
    )
    combine_parser.add_argument(
        "--out_path", help="Output path.", action="store", type=Path, required=False
    )
    combine_args = combine_parser.parse_args()
    if not combine_args.h0:
        combine_args.h0 = 0.7
    if not combine_args.out_path:
        combine_args.out_path = Path("./")
    combine_args.alpha = np.float(eval(combine_args.alpha))

    files_ptest = [
        os.path.join(combine_args.data_path, f)
        for f in listdir(combine_args.data_path)
        if isfile(join(combine_args.data_path, f)) and f.startswith("point")
    ]

    files_ptest.sort(key=sorting_function)
    times = [int(sorting_function(files_ptest[idx])) for idx in range(len(files_ptest))]
    frequencies = np.load(files_ptest[0])["frequencies"]

    Y_j = []
    sigma_j = []
    Y_spectra_j = []
    sigma_spectra_j = []
    pt_est_sigma_unweighted_path = os.path.join(
        combine_args.out_path,
        f"point_estimate_sigma_{times[0]}-{times[-1]}_UNWEIGHTED.npz",
    )
    pt_est_sigma_spectra_path = os.path.join(
        combine_args.out_path,
        "point_estimate_sigma_spectra_alpha_{:.1f}".format(combine_args.alpha)
        + f"_fref_{combine_args.fref}_{times[0]}-{times[-1]}.npz",
    )

    for file in files_ptest:
        data_file = np.load(file)
        Y_j.append(data_file["point_estimate"])
        sigma_j.append(data_file["sigma"])
        Y_spectra_j.append(data_file["point_estimate_spectrum"])
        sigma_spectra_j.append(data_file["sigma_spectrum"])

    Y_j = np.array(Y_j)
    sigma_j = np.array(sigma_j)
    np.savez(pt_est_sigma_unweighted_path, point_estimate=Y_j, sigma=sigma_j)
    logger.info(
        f"Saved file with unweighted point estimate and sigma values for all times in run:\n {pt_est_sigma_unweighted_path}."
    )

    Y_spectrum, sigma_spectrum = combine_spectra_with_sigma_weights(
        np.array(Y_spectra_j), np.array(sigma_spectra_j)
    )
    #base_Y = Baseline.from_parameters(combine_args.param_file)
    #base_Y.point_estimate_spectrum = Y_spectrum
    #base_Y.sigma_spectrum = sigma_spectrum
    Y_spectrum = OmegaSpectrum(Y_spectrum, alpha=params.alpha, fref=params.fref, h0=1.0)
    sigma_spectrum = OmegaSpectrum(sigma_spectrum, alpha=params.alpha, fref=params.fref, h0=1.0)
    
    Y_estimate, sigma_estimate = calc_Y_sigma_from_Yf_varf(
        Y_spectrum,
        sigma_spectrum ** 2,
        freqs=frequencies,
        alpha=combine_args.alpha,
        fref=combine_args.fref,
    )
    Y_estimate /= combine_args.h0 ** 2
    sigma_estimate /= combine_args.h0 ** 2

    logger.info(
        "Final point estimate weighted with alpha={:.1f}".format(combine_args.alpha)
        + f" at reference frequency fref={combine_args.fref} with h0={combine_args.h0}:\n [{Y_estimate} +/- {sigma_estimate}]"
    )

    Y_reweight_spectrum = reweight_spectral_object(
        Y_spectrum,
        frequencies,
        combine_args.alpha,
        combine_args.fref,
        old_alpha=0.0,
        old_fref=25.0,
    )
    sigma_reweight_spectrum = reweight_spectral_object(
        sigma_spectrum,
        frequencies,
        combine_args.alpha,
        combine_args.fref,
        old_alpha=0.0,
        old_fref=25.0,
    )
    Y_reweight_spectrum /= combine_args.h0 ** 2
    sigma_reweight_spectrum /= combine_args.h0 ** 2

    np.savez(
        pt_est_sigma_spectra_path,
        point_estimate=Y_estimate,
        sigma_estimate=sigma_estimate,
        point_estimate_spectrum=Y_reweight_spectrum,
        sigma_spectrum=sigma_reweight_spectrum,
    )
    logger.info(
        f"Saved file with weighted point estimate and sigma values and spectra:\n {pt_est_sigma_spectra_path}."
    )
    exit()


if __name__ == "__main__":
    main()
